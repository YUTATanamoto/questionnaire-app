{"ast":null,"code":"var _jsxFileName = \"/Users/human/tanamoto/research/art/questionnaire-app/client/src/components/Questionnaire.js\";\nimport React, { useState, useEffect } from 'react';\nimport MySlider from './MySlider';\nimport { Button, makeStyles } from '@material-ui/core';\nimport { questionnaires, baseUrl } from '../utils/Constants';\nconst useStyles = makeStyles({\n  root: {\n    height: \"100%\",\n    width: \"100%\",\n    display: \"grid\"\n  },\n  questionnaireContainer: {\n    display: \"grid\",\n    \"grid-template-rows\": \"1fr\",\n    \"grid-template-columns\": \"3fr 2fr\"\n  },\n  left: {\n    gridRow: 1,\n    gridColumn: 1,\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"space-between\"\n  },\n  right: {\n    gridRow: 1,\n    gridColumn: 2,\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"space-between\"\n  },\n  image: {\n    width: \"100%\",\n    rightRow: 1,\n    gridColumn: 1,\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"space-between\"\n  },\n  sliderContainer: {\n    width: \"100%\"\n  },\n  button: {\n    marginLeft: \"1rem\",\n    height: \"2.5rem\",\n    width: 100\n  }\n});\nconst initialAnswers = questionnaires.map((questionnaire, key) => {\n  return {\n    imageId: questionnaire.id,\n    value: 3\n  };\n});\nlet image = {\n  id: 999,\n  src: \"./1.png\"\n};\n\nconst Questionnaire = () => {\n  const classes = useStyles();\n  const [answers, setAnswers] = useState(Array(questionnaires.length).fill(3));\n  useEffect(() => {\n    console.log('useEffect called !', answers);\n    console.log('initialAnswers ', initialAnswers);\n  });\n\n  const _setAnswers = newAnswers => setAnswers(newAnswers);\n\n  async function getImage() {\n    const url = baseUrl + '/image';\n    fetch(url).then(res => res.json()).then(json => {\n      image = json;\n    });\n  }\n\n  ;\n\n  async function postAnswers() {\n    console.log('submit func called !'); // post to server, using fetch etc.\n\n    const data = {\n      imageId: image.id,\n      answers: answers\n    };\n    const url = baseUrl + '/answers';\n    const response = await fetch(url, {\n      method: 'POST',\n      mode: 'cors',\n      cache: 'no-cache',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      redirect: 'follow',\n      referrerPolicy: 'no-referrer',\n      body: JSON.stringify(data)\n    });\n    console.log(response.json());\n    setAnswers(Array(questionnaires.length).fill(3)); // get next image, using fetch etc.\n  }\n\n  ;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.questionnaireContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.left,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: image.src,\n    className: classes.image,\n    alt: image.src,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.right,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }, questionnaires.map((questionnaire, questionnaireIndex) => /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.sliderContainer,\n    key: questionnaireIndex,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(MySlider, {\n    questionnaire: questionnaire,\n    questionnaireIndex: questionnaireIndex,\n    answers: answers,\n    setAnswers: _setAnswers,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 15\n    }\n  }))))), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    className: classes.button,\n    onClick: () => postAnswers(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }, \"Submit\"), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    className: classes.button,\n    onClick: () => getImage(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }, \"get image\"));\n};\n\nexport default Questionnaire;","map":{"version":3,"sources":["/Users/human/tanamoto/research/art/questionnaire-app/client/src/components/Questionnaire.js"],"names":["React","useState","useEffect","MySlider","Button","makeStyles","questionnaires","baseUrl","useStyles","root","height","width","display","questionnaireContainer","left","gridRow","gridColumn","flexDirection","justifyContent","right","image","rightRow","sliderContainer","button","marginLeft","initialAnswers","map","questionnaire","key","imageId","id","value","src","Questionnaire","classes","answers","setAnswers","Array","length","fill","console","log","_setAnswers","newAnswers","getImage","url","fetch","then","res","json","postAnswers","data","response","method","mode","cache","headers","redirect","referrerPolicy","body","JSON","stringify","questionnaireIndex"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport MySlider from './MySlider';\nimport { Button, makeStyles } from '@material-ui/core';\nimport { questionnaires, baseUrl } from '../utils/Constants';\n\nconst useStyles = makeStyles({\n  root: {\n    height: \"100%\",\n    width: \"100%\",\n    display: \"grid\",\n  },\n  questionnaireContainer: {\n    display: \"grid\",\n    \"grid-template-rows\": \"1fr\",\n    \"grid-template-columns\": \"3fr 2fr\",\n  },\n  left: {\n    gridRow: 1,\n    gridColumn: 1,\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"space-between\",\n  },\n  right: {\n    gridRow: 1,\n    gridColumn: 2,\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"space-between\",\n  },\n  image: {\n    width: \"100%\",\n    rightRow: 1,\n    gridColumn: 1,\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"space-between\",\n  },\n  sliderContainer: {\n    width: \"100%\",\n  },\n  button: {\n    marginLeft: \"1rem\",\n    height: \"2.5rem\",\n    width: 100,\n  },\n});\n\nconst initialAnswers = questionnaires.map((questionnaire, key)=>{\n  return {imageId: questionnaire.id, value: 3}\n});\n\nlet image = {\n  id: 999,\n  src: \"./1.png\",\n};\n\nconst Questionnaire = () =>  {\n  const classes = useStyles();\n  const [answers, setAnswers] = useState(Array(questionnaires.length).fill(3));\n  useEffect(() => {\n    console.log('useEffect called !', answers);\n    console.log('initialAnswers ', initialAnswers);\n  });\n  const _setAnswers = newAnswers => setAnswers(newAnswers);\n  async function getImage() {\n    const url = baseUrl+'/image'\n    fetch(url)\n      .then(res => res.json())\n      .then(json => {\n        image=json;\n      });\n  };\n  async function postAnswers() {\n    console.log('submit func called !')\n    // post to server, using fetch etc.\n    const data = {\n      imageId: image.id,\n      answers: answers,\n    };\n    const url = baseUrl+'/answers'\n    const response = await fetch(url, {\n      method: 'POST',\n      mode: 'cors',\n      cache: 'no-cache',\n      headers: {'Content-Type': 'application/json'},\n      redirect: 'follow',\n      referrerPolicy: 'no-referrer',\n      body: JSON.stringify(data)\n    });\n    console.log(response.json());\n    setAnswers(Array(questionnaires.length).fill(3));\n    // get next image, using fetch etc.\n  };\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.questionnaireContainer}>\n        <div className={classes.left}>\n          <img src={image.src} className={classes.image} alt={image.src}/>\n        </div>\n        <div className={classes.right}>\n          {questionnaires.map((questionnaire, questionnaireIndex)=>\n            <div className={classes.sliderContainer} key={questionnaireIndex}>\n              <MySlider\n                questionnaire={questionnaire}\n                questionnaireIndex={questionnaireIndex}\n                answers={answers}\n                setAnswers={_setAnswers}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        className={classes.button}\n        onClick={() => postAnswers()}\n      >\n        Submit\n      </Button>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        className={classes.button}\n        onClick={() => getImage()}\n      >\n        get image\n      </Button>\n    </div>\n  );\n}\n\nexport default Questionnaire;\n"]},"metadata":{},"sourceType":"module"}