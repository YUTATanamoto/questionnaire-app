{"ast":null,"code":"var _jsxFileName = \"/Users/human/tanamoto/research/art/questionnaire-app/client/src/components/MySlider.js\";\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Slider from '@material-ui/core/Slider';\nimport Radio from '@material-ui/core/Radio';\nimport { MARKS } from '../utils/Constants';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: \"100%\"\n  },\n  container: {\n    display: \"grid\",\n    \"grid-template-rows\": \"1fr\",\n    \"grid-template-columns\": \"1fr 3fr 1fr\"\n  },\n  descriptionLeft: {\n    gridRow: 1,\n    gridColumn: 1,\n    display: \"flex\",\n    flexDirection: \"column\",\n    textAlign: 'center',\n    justifyContent: \"space-between\"\n  },\n  radioContainer: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    textAlign: 'center',\n    justifyContent: \"space-between\"\n  },\n  slider: {\n    gridRow: 1,\n    gridColumn: 2,\n    display: \"flex\",\n    flexDirection: \"column\",\n    textAlign: 'center',\n    justifyContent: \"space-between\"\n  },\n  descriptionRight: {\n    gridRow: 1,\n    gridColumn: 3,\n    display: \"flex\",\n    flexDirection: \"column\",\n    textAlign: 'center',\n    justifyContent: \"space-between\"\n  }\n}));\n\nconst MySlider = props => {\n  const classes = useStyles();\n  const {\n    questionnaire,\n    answers,\n    setAnswers\n  } = props;\n\n  const _setAnswers = newAnswer => {\n    // using .splice() doesn't work as expected...\n    // answers.splice(questionnaireIndex, 1, newAnswer);\n    const newAnswers = answers.map((answer, index) => {\n      if (answer.questionnaireId === questionnaire.id) {\n        return {\n          questionnaireId: answer.questionnaireId,\n          value: newAnswer\n        };\n      } else {\n        return answer;\n      }\n    });\n    setAnswers(newAnswers);\n  };\n\n  const handleChange = event => {\n    console.log(event.target.value);\n    setSelectedValue(event.target.value);\n  };\n\n  const [selectedValue, setSelectedValue] = React.useState('3');\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.descriptionLeft,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }, questionnaire.descriptionLeft)), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.radioContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, MARKS.map((mark, key) => {\n    return /*#__PURE__*/React.createElement(Radio, {\n      checked: answers.find(answer => answer.questionnaireId === questionnaire.id).value.toString === mark.label,\n      onChange: e => _setAnswers(e.target.value.toInt),\n      value: mark.label,\n      name: \"radio-button-demo\",\n      inputProps: {\n        'aria-label': 'A'\n      },\n      key: key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }\n    });\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.descriptionRight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }\n  }, questionnaire.descriptionRight))));\n};\n\nexport default MySlider; // <Slider\n//   track={false}\n//   min={1}\n//   max={5}\n//   aria-labelledby=\"track-false-slider\"\n//   defaultValue={3}\n//   marks={MARKS}\n//   value={answers.find(answer => answer.questionnaireId === questionnaire.id).value}\n//   onChangeCommitted={(_, value)=>_setAnswers(value)}\n//   className={classes.sliders}\n// />","map":{"version":3,"sources":["/Users/human/tanamoto/research/art/questionnaire-app/client/src/components/MySlider.js"],"names":["React","makeStyles","Slider","Radio","MARKS","useStyles","theme","root","width","container","display","descriptionLeft","gridRow","gridColumn","flexDirection","textAlign","justifyContent","radioContainer","slider","descriptionRight","MySlider","props","classes","questionnaire","answers","setAnswers","_setAnswers","newAnswer","newAnswers","map","answer","index","questionnaireId","id","value","handleChange","event","console","log","target","setSelectedValue","selectedValue","useState","mark","key","find","toString","label","e","toInt"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,SAASC,KAAT,QAAsB,oBAAtB;AAEA,MAAMC,SAAS,GAAGJ,UAAU,CAAEK,KAAD,KAAY;AACvCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,KAAK,EAAE;AADH,GADiC;AAIvCC,EAAAA,SAAS,EAAE;AACTC,IAAAA,OAAO,EAAE,MADA;AAET,0BAAsB,KAFb;AAGT,6BAAyB;AAHhB,GAJ4B;AASvCC,EAAAA,eAAe,EAAE;AACfC,IAAAA,OAAO,EAAE,CADM;AAEfC,IAAAA,UAAU,EAAE,CAFG;AAGfH,IAAAA,OAAO,EAAE,MAHM;AAIfI,IAAAA,aAAa,EAAE,QAJA;AAKfC,IAAAA,SAAS,EAAE,QALI;AAMfC,IAAAA,cAAc,EAAE;AAND,GATsB;AAiBvCC,EAAAA,cAAc,EAAE;AACdP,IAAAA,OAAO,EAAE,MADK;AAEdI,IAAAA,aAAa,EAAE,KAFD;AAGdC,IAAAA,SAAS,EAAE,QAHG;AAIdC,IAAAA,cAAc,EAAE;AAJF,GAjBuB;AAuBvCE,EAAAA,MAAM,EAAE;AACNN,IAAAA,OAAO,EAAE,CADH;AAENC,IAAAA,UAAU,EAAE,CAFN;AAGNH,IAAAA,OAAO,EAAE,MAHH;AAINI,IAAAA,aAAa,EAAE,QAJT;AAKNC,IAAAA,SAAS,EAAE,QALL;AAMNC,IAAAA,cAAc,EAAE;AANV,GAvB+B;AA+BvCG,EAAAA,gBAAgB,EAAE;AAChBP,IAAAA,OAAO,EAAE,CADO;AAEhBC,IAAAA,UAAU,EAAE,CAFI;AAGhBH,IAAAA,OAAO,EAAE,MAHO;AAIhBI,IAAAA,aAAa,EAAE,QAJC;AAKhBC,IAAAA,SAAS,EAAE,QALK;AAMhBC,IAAAA,cAAc,EAAE;AANA;AA/BqB,CAAZ,CAAD,CAA5B;;AAyCA,MAAMI,QAAQ,GAAIC,KAAD,IAAW;AAC1B,QAAMC,OAAO,GAAGjB,SAAS,EAAzB;AACA,QAAM;AAAEkB,IAAAA,aAAF;AAAiBC,IAAAA,OAAjB;AAA0BC,IAAAA;AAA1B,MAAyCJ,KAA/C;;AACA,QAAMK,WAAW,GAAIC,SAAD,IAAe;AACjC;AACA;AACA,UAAMC,UAAU,GAAGJ,OAAO,CAACK,GAAR,CAAY,CAACC,MAAD,EAASC,KAAT,KAAiB;AAC9C,UAAID,MAAM,CAACE,eAAP,KAA2BT,aAAa,CAACU,EAA7C,EAAiD;AAC/C,eAAO;AAACD,UAAAA,eAAe,EAAEF,MAAM,CAACE,eAAzB;AAA0CE,UAAAA,KAAK,EAAEP;AAAjD,SAAP;AACD,OAFD,MAGK;AACH,eAAOG,MAAP;AACD;AACF,KAPkB,CAAnB;AAQAL,IAAAA,UAAU,CAACG,UAAD,CAAV;AACD,GAZD;;AAaA,QAAMO,YAAY,GAAIC,KAAD,IAAW;AAC9BC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,MAAN,CAAaL,KAAzB;AACAM,IAAAA,gBAAgB,CAACJ,KAAK,CAACG,MAAN,CAAaL,KAAd,CAAhB;AACD,GAHD;;AAIA,QAAM,CAACO,aAAD,EAAgBD,gBAAhB,IAAoCxC,KAAK,CAAC0C,QAAN,CAAe,GAAf,CAA1C;AAEA,sBACE;AAAK,IAAA,SAAS,EAAEpB,OAAO,CAACf,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAEe,OAAO,CAACb,SAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAEa,OAAO,CAACX,eAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKY,aAAa,CAACZ,eAAnB,CADF,CADF,eAIE;AAAK,IAAA,SAAS,EAAEW,OAAO,CAACL,cAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCb,KAAK,CAACyB,GAAN,CAAU,CAACc,IAAD,EAAOC,GAAP,KAAe;AACxB,wBACE,oBAAC,KAAD;AACE,MAAA,OAAO,EAAEpB,OAAO,CAACqB,IAAR,CAAaf,MAAM,IAAIA,MAAM,CAACE,eAAP,KAA2BT,aAAa,CAACU,EAAhE,EAAoEC,KAApE,CAA0EY,QAA1E,KAAuFH,IAAI,CAACI,KADvG;AAEE,MAAA,QAAQ,EAAEC,CAAC,IAAEtB,WAAW,CAACsB,CAAC,CAACT,MAAF,CAASL,KAAT,CAAee,KAAhB,CAF1B;AAGE,MAAA,KAAK,EAAEN,IAAI,CAACI,KAHd;AAIE,MAAA,IAAI,EAAC,mBAJP;AAKE,MAAA,UAAU,EAAE;AAAE,sBAAc;AAAhB,OALd;AAME,MAAA,GAAG,EAAEH,GANP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAUD,GAXA,CADD,CAJF,eAkBE;AAAK,IAAA,SAAS,EAAEtB,OAAO,CAACH,gBAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKI,aAAa,CAACJ,gBAAnB,CADF,CAlBF,CADF,CADF;AA0BD,CAhDD;;AAkDA,eAAeC,QAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Slider from '@material-ui/core/Slider';\nimport Radio from '@material-ui/core/Radio';\nimport { MARKS } from '../utils/Constants';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n  },\n  container: {\n    display: \"grid\",\n    \"grid-template-rows\": \"1fr\",\n    \"grid-template-columns\": \"1fr 3fr 1fr\",\n  },\n  descriptionLeft: {\n    gridRow: 1,\n    gridColumn: 1,\n    display: \"flex\",\n    flexDirection: \"column\",\n    textAlign: 'center',\n    justifyContent: \"space-between\",\n  },\n  radioContainer: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    textAlign: 'center',\n    justifyContent: \"space-between\",\n  },\n  slider: {\n    gridRow: 1,\n    gridColumn: 2,\n    display: \"flex\",\n    flexDirection: \"column\",\n    textAlign: 'center',\n    justifyContent: \"space-between\",\n  },\n  descriptionRight: {\n    gridRow: 1,\n    gridColumn: 3,\n    display: \"flex\",\n    flexDirection: \"column\",\n    textAlign: 'center',\n    justifyContent: \"space-between\",\n  },\n}));\n\nconst MySlider = (props) => {\n  const classes = useStyles();\n  const { questionnaire, answers, setAnswers } = props;\n  const _setAnswers = (newAnswer) => {\n    // using .splice() doesn't work as expected...\n    // answers.splice(questionnaireIndex, 1, newAnswer);\n    const newAnswers = answers.map((answer, index)=>{\n      if (answer.questionnaireId === questionnaire.id) {\n        return {questionnaireId: answer.questionnaireId, value: newAnswer};\n      }\n      else {\n        return answer;\n      }\n    });\n    setAnswers(newAnswers);\n  };\n  const handleChange = (event) => {\n    console.log(event.target.value)\n    setSelectedValue(event.target.value);\n  };\n  const [selectedValue, setSelectedValue] = React.useState('3');\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.container}>\n        <div className={classes.descriptionLeft}>\n          <h2>{questionnaire.descriptionLeft}</h2>\n        </div>\n        <div className={classes.radioContainer}>\n        {MARKS.map((mark, key) => {\n          return (\n            <Radio\n              checked={answers.find(answer => answer.questionnaireId === questionnaire.id).value.toString === mark.label}\n              onChange={e=>_setAnswers(e.target.value.toInt)}\n              value={mark.label}\n              name=\"radio-button-demo\"\n              inputProps={{ 'aria-label': 'A' }}\n              key={key}\n            />\n          );\n        })}\n        </div>\n        <div className={classes.descriptionRight}>\n          <h2>{questionnaire.descriptionRight}</h2>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default MySlider\n\n// <Slider\n//   track={false}\n//   min={1}\n//   max={5}\n//   aria-labelledby=\"track-false-slider\"\n//   defaultValue={3}\n//   marks={MARKS}\n//   value={answers.find(answer => answer.questionnaireId === questionnaire.id).value}\n//   onChangeCommitted={(_, value)=>_setAnswers(value)}\n//   className={classes.sliders}\n// />\n"]},"metadata":{},"sourceType":"module"}