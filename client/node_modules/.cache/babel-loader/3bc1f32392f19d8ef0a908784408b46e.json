{"ast":null,"code":"var _jsxFileName = \"/Users/human/tanamoto/research/art/questionnaire-app/client/src/components/Questionnaire.js\";\nimport React, { useState, useEffect } from 'react';\nimport MySlider from './MySlider';\nimport { Button, makeStyles } from '@material-ui/core';\nimport { BASE_URL } from '../utils/Constants';\nconst useStyles = makeStyles({\n  root: {\n    height: \"100%\",\n    width: \"100%\",\n    display: \"grid\"\n  },\n  questionnaireContainer: {\n    display: \"grid\",\n    \"grid-template-rows\": \"1fr\",\n    \"grid-template-columns\": \"1fr 1fr\"\n  },\n  left: {\n    gridRow: 1,\n    gridColumn: 1,\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"space-between\"\n  },\n  right: {\n    gridRow: 1,\n    gridColumn: 2,\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"space-between\"\n  },\n  image: {\n    width: \"100%\",\n    rightRow: 1,\n    gridColumn: 1,\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"space-between\"\n  },\n  sliderContainer: {\n    width: \"100%\"\n  },\n  button: {\n    marginLeft: \"1rem\",\n    height: \"2.5rem\",\n    width: 100\n  }\n});\nlet QUESTIONNAIRES = [];\nlet initialAnswers = [];\n\nconst Questionnaire = () => {\n  const classes = useStyles();\n  const [answers, setAnswers] = useState([]);\n  const [didGetQuestionnaires, setDidGetQuestionnaires] = useState(false);\n  const [image, setImage] = useState({});\n  useEffect(() => {\n    console.log('useEffect called');\n\n    if (!didGetQuestionnaires) {\n      getQuestionnaires();\n      setAnswers(initialAnswers);\n    }\n\n    console.log(QUESTIONNAIRES);\n    setDidGetQuestionnaires(true);\n  });\n\n  const _setAnswers = newAnswers => setAnswers(newAnswers);\n\n  async function getQuestionnaires() {\n    const url = BASE_URL + '/questionnaires';\n    await fetch(url).then(res => res.json()).then(json => {\n      QUESTIONNAIRES = json.questionnaires;\n    });\n  }\n\n  ;\n\n  async function getImage() {\n    const url = BASE_URL + '/image';\n    await fetch(url).then(res => res.json()).then(json => setImage(json.image));\n  }\n\n  ;\n\n  async function postAnswers() {\n    const data = {\n      imageId: image.id,\n      answers: answers\n    };\n    const url = BASE_URL + '/answers';\n    const response = await fetch(url, {\n      method: 'POST',\n      mode: 'cors',\n      cache: 'no-cache',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      redirect: 'follow',\n      referrerPolicy: 'no-referrer',\n      body: JSON.stringify(data)\n    });\n    console.log(response.json());\n  }\n\n  ;\n\n  const handleSubmitClick = () => {\n    postAnswers();\n    setAnswers(initialAnswers);\n    getImage();\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.questionnaireContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.left,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: image.src,\n    className: classes.image,\n    alt: image.src,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.right,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }, QUESTIONNAIRES.map((questionnaire, questionnaireIndex) => /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.sliderContainer,\n    key: questionnaireIndex,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(MySlider, {\n    questionnaire: questionnaire,\n    answers: answers,\n    setAnswers: _setAnswers,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 15\n    }\n  }))))), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    className: classes.button,\n    onClick: () => handleSubmitClick(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }\n  }, \"Submit\"), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    className: classes.button,\n    onClick: () => getQuestionnaires(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }, \"get questionnaires\"));\n};\n\nexport default Questionnaire;","map":{"version":3,"sources":["/Users/human/tanamoto/research/art/questionnaire-app/client/src/components/Questionnaire.js"],"names":["React","useState","useEffect","MySlider","Button","makeStyles","BASE_URL","useStyles","root","height","width","display","questionnaireContainer","left","gridRow","gridColumn","flexDirection","justifyContent","right","image","rightRow","sliderContainer","button","marginLeft","QUESTIONNAIRES","initialAnswers","Questionnaire","classes","answers","setAnswers","didGetQuestionnaires","setDidGetQuestionnaires","setImage","console","log","getQuestionnaires","_setAnswers","newAnswers","url","fetch","then","res","json","questionnaires","getImage","postAnswers","data","imageId","id","response","method","mode","cache","headers","redirect","referrerPolicy","body","JSON","stringify","handleSubmitClick","src","map","questionnaire","questionnaireIndex"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport MySlider from './MySlider';\nimport { Button, makeStyles } from '@material-ui/core';\nimport { BASE_URL } from '../utils/Constants';\n\nconst useStyles = makeStyles({\n  root: {\n    height: \"100%\",\n    width: \"100%\",\n    display: \"grid\",\n  },\n  questionnaireContainer: {\n    display: \"grid\",\n    \"grid-template-rows\": \"1fr\",\n    \"grid-template-columns\": \"1fr 1fr\",\n  },\n  left: {\n    gridRow: 1,\n    gridColumn: 1,\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"space-between\",\n  },\n  right: {\n    gridRow: 1,\n    gridColumn: 2,\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"space-between\",\n  },\n  image: {\n    width: \"100%\",\n    rightRow: 1,\n    gridColumn: 1,\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"space-between\",\n  },\n  sliderContainer: {\n    width: \"100%\",\n  },\n  button: {\n    marginLeft: \"1rem\",\n    height: \"2.5rem\",\n    width: 100,\n  },\n});\n\nlet QUESTIONNAIRES = [];\nlet initialAnswers = [];\n\nconst Questionnaire = () =>  {\n  const classes = useStyles();\n  const [answers, setAnswers] = useState([]);\n  const [didGetQuestionnaires, setDidGetQuestionnaires] = useState(false);\n  const [image, setImage] = useState({});\n  useEffect(() => {\n    console.log('useEffect called')\n    if (!didGetQuestionnaires) {\n      getQuestionnaires();\n      setAnswers(initialAnswers);\n    }\n    console.log(QUESTIONNAIRES);\n    setDidGetQuestionnaires(true);\n  });\n  const _setAnswers = newAnswers => setAnswers(newAnswers);\n  async function getQuestionnaires() {\n    const url = BASE_URL+'/questionnaires'\n    await fetch(url)\n      .then(res => res.json())\n      .then(json => {\n        QUESTIONNAIRES = json.questionnaires;\n      });\n  };\n  async function getImage() {\n    const url = BASE_URL+'/image'\n    await fetch(url)\n      .then(res => res.json())\n      .then(json => setImage(json.image));\n  };\n  async function postAnswers() {\n    const data = {\n      imageId: image.id,\n      answers: answers,\n    };\n    const url = BASE_URL+'/answers'\n    const response = await fetch(url, {\n      method: 'POST',\n      mode: 'cors',\n      cache: 'no-cache',\n      headers: {'Content-Type': 'application/json'},\n      redirect: 'follow',\n      referrerPolicy: 'no-referrer',\n      body: JSON.stringify(data)\n    });\n    console.log(response.json());\n  };\n  const handleSubmitClick = () => {\n    postAnswers();\n    setAnswers(initialAnswers);\n    getImage();\n  };\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.questionnaireContainer}>\n        <div className={classes.left}>\n          <img src={image.src} className={classes.image} alt={image.src}/>\n        </div>\n        <div className={classes.right}>\n          {QUESTIONNAIRES.map((questionnaire, questionnaireIndex)=>\n            <div className={classes.sliderContainer} key={questionnaireIndex}>\n              <MySlider\n                questionnaire={questionnaire}\n                answers={answers}\n                setAnswers={_setAnswers}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        className={classes.button}\n        onClick={() => handleSubmitClick()}\n      >\n        Submit\n      </Button>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        className={classes.button}\n        onClick={() => getQuestionnaires()}\n      >\n       get questionnaires\n      </Button>\n    </div>\n  );\n}\n\nexport default Questionnaire;\n"]},"metadata":{},"sourceType":"module"}