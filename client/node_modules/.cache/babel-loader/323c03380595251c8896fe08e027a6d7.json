{"ast":null,"code":"var _jsxFileName = \"/Users/human/tanamoto/research/art/questionnaire-app/client/src/components/Questionnaire.js\";\nimport React, { useState, useEffect } from 'react';\nimport MySlider from './MySlider';\nimport MyRadioGroup from './MyRadioGroup';\nimport { Button, makeStyles } from '@material-ui/core';\nimport { BASE_URL } from '../utils/Constants';\nconst useStyles = makeStyles({\n  root: {\n    height: \"100%\",\n    width: \"100%\",\n    display: \"grid\",\n    backgroundColor: 'gray'\n  },\n  questionnaireContainer: {\n    display: \"grid\",\n    \"grid-template-rows\": \"1fr\",\n    \"grid-template-columns\": \"2fr 3fr\"\n  },\n  left: {\n    gridRow: 1,\n    gridColumn: 1,\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"space-between\"\n  },\n  right: {\n    gridRow: 1,\n    gridColumn: 2,\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"space-between\"\n  },\n  image: {\n    width: \"100%\",\n    rightRow: 1,\n    gridColumn: 1,\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"space-between\"\n  },\n  sliderContainer: {\n    width: \"100%\"\n  },\n  button: {\n    marginLeft: \"1rem\",\n    height: \"2.5rem\",\n    width: 100\n  }\n});\n\nconst Questionnaire = props => {\n  const classes = useStyles();\n  const questionnaires = props.location.state.questionnaires ? props.location.state.questionnaires : [];\n  const initialAnswers = questionnaires.map((questionnaire, key) => {\n    return {\n      questionnaireId: questionnaire.id,\n      value: 3\n    };\n  });\n  const [answers, setAnswers] = useState(initialAnswers);\n  const [image, setImage] = useState({});\n  const [isSubmitButtonDisabled, setIsSubmitButtonDisabled] = useState(false);\n  useEffect(() => {\n    getImage();\n  }, []);\n\n  const _setAnswers = newAnswers => setAnswers(newAnswers);\n\n  async function getImage() {\n    const url = BASE_URL + '/image';\n    await fetch(url).then(res => res.json()).then(json => setImage(json.image));\n  }\n\n  ;\n\n  async function postAnswers() {\n    setIsSubmitButtonDisabled(true);\n    const data = {\n      imageId: image.id,\n      answers: answers\n    };\n    const url = BASE_URL + '/answers';\n    const response = await fetch(url, {\n      method: 'POST',\n      mode: 'cors',\n      cache: 'no-cache',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      redirect: 'follow',\n      referrerPolicy: 'no-referrer',\n      body: JSON.stringify(data)\n    });\n    const responseJson = await response.json();\n    const message = responseJson.message;\n\n    if (message === 'OK') {\n      setIsSubmitButtonDisabled(false);\n    }\n  }\n\n  ;\n\n  async function handleSubmitClick() {\n    await postAnswers();\n    getImage();\n    setAnswers(initialAnswers);\n  }\n\n  ;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.questionnaireContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.left,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }\n  }, image.id), /*#__PURE__*/React.createElement(\"img\", {\n    src: image.src,\n    className: classes.image,\n    alt: image.src,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.right,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }, questionnaires.map((questionnaire, questionnaireIndex) => /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.sliderContainer,\n    key: questionnaireIndex,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(MyRadioGroup, {\n    questionnaire: questionnaire,\n    questionnaireIndex: questionnaireIndex,\n    answers: answers,\n    setAnswers: _setAnswers,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 15\n    }\n  }))))), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    disabled: isSubmitButtonDisabled,\n    className: classes.button,\n    onClick: () => handleSubmitClick(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }, \"Submit\"));\n};\n\nexport default Questionnaire;","map":{"version":3,"sources":["/Users/human/tanamoto/research/art/questionnaire-app/client/src/components/Questionnaire.js"],"names":["React","useState","useEffect","MySlider","MyRadioGroup","Button","makeStyles","BASE_URL","useStyles","root","height","width","display","backgroundColor","questionnaireContainer","left","gridRow","gridColumn","flexDirection","justifyContent","right","image","rightRow","sliderContainer","button","marginLeft","Questionnaire","props","classes","questionnaires","location","state","initialAnswers","map","questionnaire","key","questionnaireId","id","value","answers","setAnswers","setImage","isSubmitButtonDisabled","setIsSubmitButtonDisabled","getImage","_setAnswers","newAnswers","url","fetch","then","res","json","postAnswers","data","imageId","response","method","mode","cache","headers","redirect","referrerPolicy","body","JSON","stringify","responseJson","message","handleSubmitClick","src","questionnaireIndex"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport MySlider from './MySlider';\nimport MyRadioGroup from './MyRadioGroup';\nimport { Button, makeStyles } from '@material-ui/core';\nimport { BASE_URL } from '../utils/Constants';\n\nconst useStyles = makeStyles({\n  root: {\n    height: \"100%\",\n    width: \"100%\",\n    display: \"grid\",\n    backgroundColor: 'gray',\n  },\n  questionnaireContainer: {\n    display: \"grid\",\n    \"grid-template-rows\": \"1fr\",\n    \"grid-template-columns\": \"2fr 3fr\",\n  },\n  left: {\n    gridRow: 1,\n    gridColumn: 1,\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"space-between\",\n  },\n  right: {\n    gridRow: 1,\n    gridColumn: 2,\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"space-between\",\n  },\n  image: {\n    width: \"100%\",\n    rightRow: 1,\n    gridColumn: 1,\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"space-between\",\n  },\n  sliderContainer: {\n    width: \"100%\",\n  },\n  button: {\n    marginLeft: \"1rem\",\n    height: \"2.5rem\",\n    width: 100,\n  },\n});\n\nconst Questionnaire = props =>  {\n  const classes = useStyles();\n  const questionnaires = props.location.state.questionnaires ? props.location.state.questionnaires: []\n  const initialAnswers = questionnaires.map((questionnaire, key)=>{\n    return {questionnaireId: questionnaire.id, value: 3}\n  });\n  const [answers, setAnswers] = useState(initialAnswers);\n  const [image, setImage] = useState({});\n  const [isSubmitButtonDisabled, setIsSubmitButtonDisabled] = useState(false);\n  useEffect(() => {\n    getImage();\n  }, []);\n  const _setAnswers = newAnswers => setAnswers(newAnswers);\n  async function getImage() {\n    const url = BASE_URL+'/image'\n    await fetch(url)\n      .then(res => res.json())\n      .then(json => setImage(json.image));\n  };\n  async function postAnswers() {\n    setIsSubmitButtonDisabled(true)\n    const data = {\n      imageId: image.id,\n      answers: answers,\n    };\n    const url = BASE_URL+'/answers'\n    const response = await fetch(url, {\n      method: 'POST',\n      mode: 'cors',\n      cache: 'no-cache',\n      headers: {'Content-Type': 'application/json'},\n      redirect: 'follow',\n      referrerPolicy: 'no-referrer',\n      body: JSON.stringify(data)\n    });\n    const responseJson = await response.json();\n    const message = responseJson.message;\n    if (message === 'OK'){\n      setIsSubmitButtonDisabled(false);\n    }\n  };\n  async function handleSubmitClick() {\n    await postAnswers();\n    getImage();\n    setAnswers(initialAnswers);\n  };\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.questionnaireContainer}>\n        <div className={classes.left}>\n          <p>{image.id}</p>\n          <img src={image.src} className={classes.image} alt={image.src}/>\n        </div>\n        <div className={classes.right}>\n          {questionnaires.map((questionnaire, questionnaireIndex)=>\n            <div className={classes.sliderContainer} key={questionnaireIndex}>\n              <MyRadioGroup\n                questionnaire={questionnaire}\n                questionnaireIndex={questionnaireIndex}\n                answers={answers}\n                setAnswers={_setAnswers}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        disabled={isSubmitButtonDisabled}\n        className={classes.button}\n        onClick={() => handleSubmitClick()}\n      >\n        Submit\n      </Button>\n    </div>\n  );\n}\n\nexport default Questionnaire;\n"]},"metadata":{},"sourceType":"module"}