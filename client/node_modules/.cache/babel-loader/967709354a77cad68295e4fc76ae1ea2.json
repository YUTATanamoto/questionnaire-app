{"ast":null,"code":"var _jsxFileName = \"/Users/human/tanamoto/research/art/questionnaire-app/client/src/components/MyRadioGroup.js\";\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport { MARKS } from '../utils/Constants';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: \"100%\"\n  },\n  container: {\n    display: \"grid\",\n    \"grid-template-rows\": \"1fr\",\n    \"grid-template-columns\": \"1fr 3fr 1fr\"\n  },\n  descriptionLeft: {\n    gridRow: 1,\n    gridColumn: 1,\n    display: \"flex\",\n    flexDirection: \"column\",\n    textAlign: 'center',\n    justifyContent: \"space-between\"\n  },\n  radioContainer: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    textAlign: 'center',\n    justifyContent: \"space-between\"\n  },\n  descriptionRight: {\n    gridRow: 1,\n    gridColumn: 3,\n    display: \"flex\",\n    flexDirection: \"column\",\n    textAlign: 'center',\n    justifyContent: \"space-between\"\n  }\n}));\n\nconst MyRadioGroup = props => {\n  const classes = useStyles();\n  const {\n    questionnaire,\n    answers,\n    setAnswers\n  } = props;\n\n  const _setAnswers = newAnswer => {\n    console.log(newAnswer); // using .splice() doesn't work as expected...\n    // answers.splice(questionnaireIndex, 1, newAnswer);\n\n    const newAnswers = answers.map((answer, index) => {\n      if (answer.questionnaireId === questionnaire.id) {\n        return {\n          questionnaireId: answer.questionnaireId,\n          value: newAnswer\n        };\n      } else {\n        return answer;\n      }\n    });\n    console.log(newAnswers);\n    setAnswers(newAnswers);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.descriptionLeft,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }\n  }, questionnaire.descriptionLeft)), /*#__PURE__*/React.createElement(RadioGroup, {\n    \"aria-label\": \"gender\",\n    name: \"gender1\",\n    value: answers.find(answer => answer.questionnaireId === questionnaire.id).value,\n    onChange: e => _setAnswers(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.radioContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }, MARKS.map((mark, key) => {\n    return /*#__PURE__*/React.createElement(Radio, {\n      value: mark.label,\n      key: key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }\n    });\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.descriptionRight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }, questionnaire.descriptionRight))));\n};\n\nexport default MyRadioGroup;","map":{"version":3,"sources":["/Users/human/tanamoto/research/art/questionnaire-app/client/src/components/MyRadioGroup.js"],"names":["React","makeStyles","Radio","RadioGroup","MARKS","useStyles","theme","root","width","container","display","descriptionLeft","gridRow","gridColumn","flexDirection","textAlign","justifyContent","radioContainer","descriptionRight","MyRadioGroup","props","classes","questionnaire","answers","setAnswers","_setAnswers","newAnswer","console","log","newAnswers","map","answer","index","questionnaireId","id","value","find","e","target","mark","key","label"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport { MARKS } from '../utils/Constants';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n  },\n  container: {\n    display: \"grid\",\n    \"grid-template-rows\": \"1fr\",\n    \"grid-template-columns\": \"1fr 3fr 1fr\",\n  },\n  descriptionLeft: {\n    gridRow: 1,\n    gridColumn: 1,\n    display: \"flex\",\n    flexDirection: \"column\",\n    textAlign: 'center',\n    justifyContent: \"space-between\",\n  },\n  radioContainer: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    textAlign: 'center',\n    justifyContent: \"space-between\",\n  },\n  descriptionRight: {\n    gridRow: 1,\n    gridColumn: 3,\n    display: \"flex\",\n    flexDirection: \"column\",\n    textAlign: 'center',\n    justifyContent: \"space-between\",\n  },\n}));\n\nconst MyRadioGroup = (props) => {\n  const classes = useStyles();\n  const { questionnaire, answers, setAnswers } = props;\n  const _setAnswers = (newAnswer) => {\n    console.log(newAnswer)\n    // using .splice() doesn't work as expected...\n    // answers.splice(questionnaireIndex, 1, newAnswer);\n    const newAnswers = answers.map((answer, index)=>{\n      if (answer.questionnaireId === questionnaire.id) {\n        return {questionnaireId: answer.questionnaireId, value: newAnswer};\n      }\n      else {\n        return answer;\n      }\n    });\n    console.log(newAnswers);\n    setAnswers(newAnswers);\n  };\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.container}>\n        <div className={classes.descriptionLeft}>\n          <h2>{questionnaire.descriptionLeft}</h2>\n        </div>\n        <RadioGroup\n          aria-label=\"gender\"\n          name=\"gender1\"\n          value={answers.find(answer => answer.questionnaireId === questionnaire.id).value}\n          onChange={e=>_setAnswers(e.target.value)}\n          >\n          <div className={classes.radioContainer}>\n            {MARKS.map((mark, key) => {\n              return (\n                <Radio\n                  value={mark.label}\n                  key={key}\n                />\n              );\n            })}\n          </div>\n        </RadioGroup>\n        <div className={classes.descriptionRight}>\n          <h2>{questionnaire.descriptionRight}</h2>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default MyRadioGroup\n"]},"metadata":{},"sourceType":"module"}